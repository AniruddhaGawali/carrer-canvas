datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("userId") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @map("userId") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Resume        Resume[]
  PersonalInfo  PersonalInfo[]
  Social        Social[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @map("user_id") @db.ObjectId
  template       Int?
  title          String
  personalInfoId String? @map("personal_info_id") @db.ObjectId
  socialLink     Json?   @map("social_link")

  personalInfo PersonalInfo? @relation(fields: [personalInfoId], references: [id])
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillsId     String?

  @@map("resume")
}

model PersonalInfo {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @map("user_id") @db.ObjectId
  name     String
  email    String
  phone    String
  jobTitle String
  address1 String
  address2 String
  website  String?
  skills   Json[]
  Resume   Resume[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_info")
}

model Social {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("user_id") @db.ObjectId
  linkedin  String?
  github    String?
  twitter   String?
  instagram String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social")
}
