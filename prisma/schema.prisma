datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")

  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("userId") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @map("userId") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  hashedPassword          String?
  accounts                Account[]
  sessions                Session[]
  Resume                  Resume[]
  PersonalInfo            PersonalInfo[]
  Social                  Social[]
  Skills                  Skills[]
  Experience              Experience[]
  Project                 Project[]
  Education               Education[]
  AwardsAndCertifications AwardsAndCertifications[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String @map("user_id") @db.ObjectId
  template                Int?
  title                   String
  personalInfo            Json?
  social                  Json?  @map("social_link")
  skills                  Json[]
  experience              Json[]
  project                 Json[]
  education               Json[]
  awardsAndCertifications Json[] @map("awards_and_certifications")
  User                    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PersonalInfo {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @map("user_id") @db.ObjectId
  name     String
  email    String
  phone    String
  jobTitle String
  address1 String
  address2 String
  website  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skills {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @map("user_id") @db.ObjectId
  skills Json[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Social {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("user_id") @db.ObjectId
  linkedin  String?
  github    String?
  twitter   String?
  instagram String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  company     String
  position    String   @map("job_title")
  location    String
  startDate   DateTime
  endDate     DateTime
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  name        String
  projectType String   @map("project_type")
  description String
  link        String
  startDate   DateTime
  endDate     DateTime
  tech        String[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  college     String
  degree      String
  startDate   DateTime
  endDate     DateTime
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AwardsAndCertifications {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  name        String
  date        DateTime
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
